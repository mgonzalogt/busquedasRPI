@using BusquedasRPI.Models

<h2 class="content-block">B&uacute;squedas</h2>

<div class="content-block">
    <div class="searchContainer">
        <div class="searchElementFull">
            <table style="width:100%">
                <tr>
                    <td style="width:95%">
                        Expediente:
                        @Html.TextBox("fldExpediente", "", new { @class = "searchText", @placeholder = @Html.DisplayName("Obtener datos por expediente") })
                    </td>
                    <td style="padding-left:5px" valign="middle">
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    &nbsp;
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    <button class="searchButtonDetalle" name="buttonExpediente" onclick="getClassByExpedienteId();">
                                        Buscar
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </td>

                </tr>

            </table>

        </div>
    </div>

    <div class="searchContainer">
        <div class="searchElementFull">
            <table style="width:100%">
                <tr>
                    <td style="width:95%">
                        Detalle de clase:
                        @Html.TextBox("fldSearchTextDetalle", "", new { @class = "searchText", @placeholder = @Html.DisplayName("Buscar clases por detalle") })
                    </td>
                    <td style="padding-left:5px" valign="middle">
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    &nbsp;
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    <button class="searchButtonDetalle" name="buttonSearchDetalle" onclick="doSearchDetalle();">
                                        Buscar
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </td>

                </tr>

            </table>

        </div>
    </div>

    <div class="searchContainer">
        <div class="searchElementFull">
            Clasificaci&oacute;n de Niza:
            @(Html.DevExtreme().DataGrid<ClasificacionNiza>()
                .ID("classesGrid")
                .DataSource(d =>
                    d.Mvc()
                    .Controller("ClasificacionNiza")
                    .LoadAction("GetClasificacion")
                    .Key("Id")
                    .LoadParams(new { searchText = new JS("function() { return $('#fldSearchTextDetalle').val() }") })
                )
                .ShowBorders(true)
                .Selection(s => {
                    s.Mode(SelectionMode.Multiple);
                    s.ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always);
                    s.SelectAllMode(SelectAllMode.AllPages);
                } )
                .NoDataText("[ No existen clases para el criterio de busqueda ingresado ]")
                .FilterRow(f => f.Visible(true))
                .ColumnAutoWidth(true)
                .ColumnHidingEnabled(true)
                .Columns(columns => {
                    columns.AddFor(m => m.Descripcion).Caption("Clase");
                    columns.AddFor(m => m.Detalle).Caption("Detalle");
                })
                .WordWrapEnabled(true)
                .Paging(p => p.PageSize(5))
                .Pager(p => p
                    .ShowPageSizeSelector(true)
                    .AllowedPageSizes(new[] { 5, 10, 25, 50 })
                    .ShowInfo(true)
                    .InfoText("Pagina {0} de {1} ({2} registros) ")
                )
            )

        </div>
    </div>

    <div class="searchContainer">
        <div class="searchElementFull">
            <table style="width:100%">
                <tr>
                    <td>
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    Tipo
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    @Html.DropDownListFor(model => TypeParameter.fldSearchType, TypeParameter.SearchTypeList, null, new { @class = "searchSelectCriteria" })
                                </td>
                            </tr>
                        </table>
                    </td>
                    <td style="padding-left: 5px;">
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    Alfa
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    @Html.CheckBox("fldSearchAlphaOnly", true, new { @id = "fldSearchAlphaOnly", @class = "searchCheckbox" })
                                </td>
                            </tr>
                        </table>
                    </td>
                    <td style="padding-left: 5px;">
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    Completo
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    @Html.CheckBox("fldSearchAll", true, new { @id = "fldSearchAll", @class = "searchCheckbox" })
                                </td>
                            </tr>
                        </table>
                    </td>
                    <td style="padding-left: 5px; display:none;" id="parcialContainer">
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    Parcial
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    @Html.CheckBox("fldSearchSubstrings", false, new { @id = "fldSearchSubstrings", @class = "searchCheckbox" })
                                </td>
                            </tr>
                        </table>
                    </td>
                    <td style="padding-left: 5px;">
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    Criterio
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    @Html.DropDownListFor(model => WildParameter.CriteriaType, WildParameter.CriteriaTypeList, null, new { @class = "searchSelectCriteria" })
                                </td>
                            </tr>
                        </table>
                    </td>
                    <td style="padding-left: 10px; width: 95%;">
                        &nbsp;
                        @Html.TextBox("fldSearchText", "", new { autofocus = "autofocus", @class = "searchTextMain", @placeholder = @Html.DisplayName("Texto a buscar en marcas o titulares") })
                    </td>
                </tr>

            </table>

        </div>
    </div>

    <div class="searchContainer">
        <div class="searchElementFull">
            <button class="searchButtonMain" name="buttonSearch" id="buttonSearch" onclick="doSearch();">
                BUSCAR
            </button>
        </div>
    </div>

    <div class="searchContainerIcon">
        <div class="searchElementIcon">
            @(Html.DevExtreme().Button()
                .Icon("xlsxfile")
                .Text("Excel")
                .OnClick("exportToExcel")
            )
        </div>
        <div class="searchElementIcon">
            @(Html.DevExtreme().Button()
                .Icon("exportpdf")
                .Text("PDF")
                .OnClick("exportToPDF")
            )
        </div>
    </div>

    <div class="searchContainer">
        <div class="searchElementFull">
            @(Html.DevExtreme().DataGrid<Marca>()
                .ID("searchGrid")
                .DataSource(d =>
                    d.Mvc()
                    .Controller("Marcas")
                    .LoadAction("SearchMarcas")
                    .Key("Id")
                    .LoadParams(new { searchParams = new JS("function() { return getSearchParameters() }") })
                )
                .OnContentReady("enableSearchButton")
                .ShowBorders(true)
                .Selection(s => {
                    s.Mode(SelectionMode.Multiple);
                    s.ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always);
                } )
                .NoDataText("[ Ingrese algunos criterios validos busqueda ]")
                .Grouping(grouping => {
                    grouping.AutoExpandAll(true);
                    grouping.Texts(t =>
                    {
                        t.GroupContinuedMessage("Continua de la pagina anterior");
                        t.GroupContinuesMessage("Continua en la pagina siguiente");
                        t.Ungroup("Desagrupar");
                        t.UngroupAll("Desagrupar todo");
                        t.GroupByThisColumn("Agrupar por esta columna");
                    });
                })
                .SearchPanel(searchPanel => searchPanel.Visible(true).Placeholder("Buscar..."))
                .GroupPanel(groupPanel => groupPanel.Visible(true).EmptyPanelText("Arrastre una columna aqui para agrupar"))
                .FilterRow(f => f.Visible(true))
                .ColumnAutoWidth(true)
                .ColumnHidingEnabled(true)
                .Columns(columns => {
                    columns.AddFor(m => m.Clase).Caption("Clase").Width(175);
                    columns.AddFor(m => m.Registro).Caption("Registro").Width(100);
                    columns.AddFor(m => m.ExpedienteId).Caption("Expediente").Width(110);
                    columns.AddFor(m => m.Denominacion).Caption("Denominacion");
                    columns.AddFor(m => m.Traduccion).Caption("Traduccion");
                    columns.AddFor(m => m.Estado).Caption("Estado");
                    columns.AddFor(m => m.TitularNombre).Caption("Titular").GroupIndex(0);
                })
                .WordWrapEnabled(true)
                .Paging(p => p.PageSize(25))
                .Pager(p => p
                    .ShowPageSizeSelector(true)
                    .AllowedPageSizes(new[] { 5, 10, 25, 50 })
                    .ShowInfo(true)
                    .InfoText("Pagina {0} de {1} ({2} registros) ")
                )
                .MasterDetail(md => {
                    md.Enabled(true);
                    md.Template(@<text>
                        <div class="gridDivDetail"><span style="color:#808080;">Tipo:</span> <%- data.TipoDeMarca %></div>
                        <div class="gridDivDetail"><span style="color:#808080;">Expediente Renovaci&oacute;n:</span> <%- data.ExpedienteRenovacion %></div>
                        <div class="gridDivDetail"><span style="color:#808080;">Expediente Anotaci&oacute;n:</span> <%- data.ExpedienteAnotacion %></div>
                        <div class="gridDivDetail"><span style="color:#808080;">Detalle de la clase:</span> <%- data.ClaseDetalle %></div>
                    </text>);
                })
            )

        </div>
    </div>
</div>

<script>

    var vLoggedUser = '@ViewContext.HttpContext.Request.Query["user"]';
    if (vLoggedUser == '') vLoggedUser = 'Publico';

    $(document).ready(function () {

        $('#fldSearchTextDetalle').keypress(function (e) {
            var key = (e.keyCode ? e.keyCode : e.which);
            if (key == '13') {
                doSearchDetalle();
                return false;
            }
        });

        $('#fldSearchText').keypress(function (e) {
            var key = (e.keyCode ? e.keyCode : e.which);
            if (key == '13') {
                doSearch();
                return false;
            }
        });

        $('#fldExpediente').keypress(function (e) {
            var key = (e.keyCode ? e.keyCode : e.which);
            if (key == '13') {
                getClassByExpedienteId();
                return false;
            }
        });

        $('#fldSearchType').change(function (e) {
            $('#fldSearchSubstrings').prop('checked', false);
            if ($('#fldSearchType').val() == "0") {
                $('#parcialContainer').show();
            } else {
                $('#parcialContainer').hide();
            }
        });

        resetSelections();
    });

    function classesToList(selectedClasses) {
        var vReturn = "";

        for (var i = 0; i < selectedClasses.length; i++) {
            if (i > 0) vReturn = vReturn + ",";
            vReturn = vReturn + selectedClasses[i].Id;
        }

        return vReturn;
    }

    function getSearchParameters() {
        var vReturn = {};
        var classes = $("#classesGrid").dxDataGrid("instance");
        var selectedClasses = classes.getSelectedRowsData();

        vReturn.Classes = classesToList(selectedClasses);
        vReturn.Type = $("#fldSearchType").val();
        vReturn.AllWords = $("#fldSearchAll").is(":checked");
        vReturn.Substrings = $("#fldSearchSubstrings").is(":checked");
        vReturn.AlphaOnly = $("#fldSearchAlphaOnly").is(":checked");
        vReturn.WildCriteria = $('#CriteriaType').val();
        vReturn.Text = $('#fldSearchText').val();

        return JSON.stringify(vReturn);
    }

    function validateSearch() {
        var classes = $("#classesGrid").dxDataGrid("instance");
        var selectedClasses = classes.getSelectedRowsData();
        var selectedType = $("#fldSearchType").val();
        var selectedSubstrings = $("#fldSearchSubstrings").is(":checked");
        var warningMessage = "";
        var vReturn = {};
        vReturn.valid = true;
        vReturn.warning = "";

        //foneticas y no clases (all classes)
        if (selectedType == '0' && (selectedClasses.length == 0 || selectedClasses.length == 47)) {
            warningMessage = warningMessage + "\n- Busqueda fonetica sobre todas las clases.";
        }

        //Substrings
        if (selectedSubstrings) {
            warningMessage = warningMessage + "\n- Buscar subpalabras parciales.";
        }

        vReturn.valid = $.trim(warningMessage) == '';
        if ($.trim(warningMessage) != '') {
            vReturn.warning = "\nRazones por las que su consulta podria demorar:\n" + warningMessage;
        }

        return vReturn;
    }

    function doSearch() {
        var validation = validateSearch();
        if (!validation.valid) {
            if (confirm(validation.warning + '\n\nDesea continuar?')) {
                disableSearchButton();
                $('#searchGrid').dxDataGrid('instance').refresh();
            }
        } else {
            disableSearchButton();
            $('#searchGrid').dxDataGrid('instance').refresh();
        }
    }

    function disableSearchButton() {
        $('#buttonSearch').hide();
    }

    function enableSearchButton() {
        $('#buttonSearch').show();
    }

    function doSearchDetalle() {
        $('#classesGrid').dxDataGrid('instance').refresh();
    }

    function doSelectAll(e) {
        e.component.selectAll();
    }

    function doClearSelectionGrid(grid) {
        var dataGrid = $("#" + grid).dxDataGrid("instance");
        dataGrid.clearSelection();
    }

    function doSelectClassesGrid(id) {
        var dataGrid = $("#classesGrid").dxDataGrid("instance");
        //Default Servicios and Senal de Publicidad
        dataGrid.selectRows([1, 47, id]);
    }

    function resetSelections() {
        $("#fldSearchText").val('');
        doClearSelectionGrid('classesGrid');
        $("#fldSearchType").val("1");
        $('#fldSearchAll').prop('checked', true);
        $('#fldSearchSubstrings').prop('checked', false);
        $('#CriteriaType').val("0");
        $('#parcialContainer').hide();
        $('#fldSearchText').focus();
    }

    function getClassByExpedienteId() {
        var vExpedienteId = $("#fldExpediente").val().trim();

        //Reset selections
        resetSelections();

        $.ajax({
            type: "Get",
            url: "/Expediente/GetMarcaByExpedienteId?expedienteId=" + vExpedienteId,
            success: function (data) {
                if (data && data.Id) {
                    var vDenominacion = String(data.Denominacion).trim();
                    var vClase = String(data.Clase).trim();

                    $("#fldSearchText").val(vDenominacion);
                    $('#CriteriaType').val("3");
                    doSelectClassesGrid(vClase);
                }
            },
            error: function (response) {
                console.log(response.responseText);
            }
        });
    }

    function exportToExcel() {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Marcas');
        var dataGrid = $("#searchGrid").dxDataGrid("instance");

        DevExpress.excelExporter.exportDataGrid({
            component: dataGrid,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'Marcas.xlsx');
            });
        });
        e.cancel = true;
    }

    function dateToString(dt) {
        var mm = dt.getMonth() + 1; // getMonth() is zero-based
        var dd = dt.getDate();

        return [
            (dd > 9 ? '' : '0') + dd + '/',
            (mm > 9 ? '' : '0') + mm + '/', 
            dt.getFullYear() + ' - ',
            dt.getHours() + ":",
            dt.getMinutes() + ":",
            dt.getSeconds()
        ].join('');
    };

    function exportToPDF() {
        var doc = new jsPDF();
        var dataGrid = $("#searchGrid").dxDataGrid("instance");
        var vHoy = new Date();

        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid
        }).then(function () {
            doc.setPage(1);
            doc.setTextColor('#808080');
            doc.setFontSize(12);
            doc.text(20, 10, 'Usuario: ' + vLoggedUser + '    Fecha: ' + dateToString(vHoy), null, 0);
            doc.save("Marcas.pdf");
        });
    }
</script>



