@using BusquedasRPI.Models

<h2 class="content-block">B&uacute;squedas P&uacute;blicas</h2>

<div class="content-block pSearch">

    <div class="searchContainer">
        <div class="searchElementFull">
            <table style="width:100%">
                <tr>
                    <td style="width:95%">
                        Detalle de clase:
                        @Html.TextBox("fldSearchTextDetalle", "", new { @class = "searchText", @placeholder = @Html.DisplayName("Buscar clases por detalle") })
                    </td>
                    <td style="padding-left:5px" valign="middle">
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    &nbsp;
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    <button class="searchButtonDetalle" name="buttonSearchDetalle" onclick="doSearchDetalle();">
                                        Buscar
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </td>

                </tr>

            </table>

        </div>
    </div>

    <div class="searchContainer">
        <div class="searchElementFull">
            Clasificaci&oacute;n de Niza:
            @(Html.DevExtreme().DataGrid<ClasificacionNiza>()
                .ID("classesGrid")
                .DataSource(d =>
                    d.Mvc()
                    .Controller("ClasificacionNiza")
                    .LoadAction("GetClasificacion")
                    .Key("Id")
                    .LoadParams(new { searchText = new JS("function() { return $('#fldSearchTextDetalle').val() }") })
                )
                .ShowBorders(true)
                .Selection(s => {
                    s.Mode(SelectionMode.Multiple);
                    s.ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always);
                    s.SelectAllMode(SelectAllMode.AllPages);
                } )
                .NoDataText("[ No existen clases para el criterio de busqueda ingresado ]")
                .FilterRow(f => f.Visible(true))
                .ColumnAutoWidth(true)
                .ColumnHidingEnabled(true)
                .Columns(columns => {
                    columns.AddFor(m => m.Descripcion).Caption("Clase");
                })
                .Paging(p => p.PageSize(5))
                .Pager(p => p
                    .ShowPageSizeSelector(true)
                    .AllowedPageSizes(new[] { 5, 10, 25, 50 })
                    .ShowInfo(true)
                    .InfoText("Pagina {0} de {1} ({2} registros) ")
                )
                .MasterDetail(md => {
                    md.Enabled(true);
                    md.Template(@<text><div><span style="color:#808080;">Detalle:</span> <%- data.Detalle %></div></text>);
                })
            )

        </div>
    </div>

    <div class="searchContainer">
        <div class="searchElementFull">
            <table style="width:100%">
                <tr>
                    <td>
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    Fon&eacute;tica
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    @Html.RadioButton("fldSearchType", "0", new { @id = "fldSearchFonetica", @class = "searchCheckbox" })
                                </td>
                            </tr>
                        </table>
                    </td>
                    <td style="padding-left: 5px;">
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    Exacto
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    @Html.RadioButton("fldSearchType", "1", new { @id = "fldSearchExacto", @class = "searchCheckbox", @checked = "checked" })
                                </td>
                            </tr>
                        </table>
                    </td>
                    <td style="padding-left: 5px;">
                        <table style="width:100%">
                            <tr>
                                <td style="text-align:center">
                                    Completo
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align:center">
                                    @Html.CheckBox("fldSearchAll", true, new { @id = "fldSearchAll", @class = "searchCheckbox" })
                                </td>
                            </tr>
                        </table>
                    </td>
                    <td style="padding-left: 10px; width: 95%;">
                        &nbsp;
                        @Html.TextBox("fldSearchText", "", new { @class = "searchTextMain", @placeholder = @Html.DisplayName("Texto a buscar en marcas") })
                    </td>
                </tr>

            </table>

        </div>
    </div>

    <div class="searchContainer">
        <div class="searchElementFull">
            <button class="searchButtonMain" name="buttonSearch" id="buttonSearch" onclick="doSearch();">
                BUSCAR
            </button>
        </div>
    </div>

    <div class="searchContainerIcon">
        <div class="searchElementIcon">
            @(Html.DevExtreme().Button()
                .Icon("exportpdf")
                .Text("PDF")
                .OnClick("exportToPDF")
            )
        </div>
    </div>

    <div class="searchContainer">
        <div class="searchElementFull">
            @(Html.DevExtreme().DataGrid<Marca>()
                .ID("searchGrid")
                .DataSource(d =>
                    d.Mvc()
                    .Controller("Marcas")
                    .LoadAction("SearchMarcas")
                    .Key("Id")
                    .LoadParams(new { searchParams = new JS("function() { return getSearchParameters() }") })
                )
                .OnContentReady("enableSearchButton")
                .ShowBorders(true)
                .Selection(s => {
                    s.Mode(SelectionMode.Multiple);
                    s.ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always);
                } )
                .NoDataText("[ Ingrese algunos criterios validos busqueda ]")
                .Grouping(grouping => {
                    grouping.AutoExpandAll(true);
                    grouping.Texts(t =>
                    {
                        t.GroupContinuedMessage("Continua de la pagina anterior");
                        t.GroupContinuesMessage("Continua en la pagina siguiente");
                        t.Ungroup("Desagrupar");
                        t.UngroupAll("Desagrupar todo");
                        t.GroupByThisColumn("Agrupar por esta columna");
                    });
                })
                .SearchPanel(searchPanel => searchPanel.Visible(true).Placeholder("Buscar..."))
                .GroupPanel(groupPanel => groupPanel.Visible(true).EmptyPanelText("Arrastre una columna aqui para agrupar"))
                .FilterRow(f => f.Visible(true))
                .ColumnAutoWidth(true)
                .ColumnHidingEnabled(true)
                .Columns(columns => {
                    columns.AddFor(m => m.Clase).Caption("Clase").Width(175);
                    columns.AddFor(m => m.Registro).Caption("Registro").Width(100);
                    columns.AddFor(m => m.ExpedienteId).Caption("Expediente").Width(100);
                    columns.AddFor(m => m.Denominacion).Caption("Denominacion");
                })
                .Paging(p => p.PageSize(25))
                .Pager(p => p
                    .ShowPageSizeSelector(true)
                    .AllowedPageSizes(new[] { 5, 10, 25, 50 })
                    .ShowInfo(true)
                    .InfoText("Pagina {0} de {1} ({2} registros) ")
                )
                .MasterDetail(md => {
                    md.Enabled(true);
                    md.Template(@<text>
                        <div><span style="color:#808080;">Traducci&oacute;n:</span> <%- data.Traduccion %></div>
                        <div><span style="color:#808080;">Tipo:</span> <%- data.TipoDeMarca %></div>
                        <div><span style="color:#808080;">Estado:</span> <%- data.Estado %></div>
                        <div><span style="color:#808080;">Expediente Renovaci&oacute;n:</span> <%- data.ExpedienteRenovacion %></div>
                        <div><span style="color:#808080;">Expediente Anotaci&oacute;n:</span> <%- data.ExpedienteAnotacion %></div>
                        <div><span style="color:#808080;">Detalle de la clase:</span> <%- data.ClaseDetalle %></div>
                    </text>);
                })
            )

        </div>
    </div>
</div>

<script>

    $(document).ready(function () {
        $('#fldSearchTextDetalle').keypress(function (e) {
            var key = (e.keyCode ? e.keyCode : e.which);
            if (key == '13') {
                doSearchDetalle();
                return false;
            }
        });

        $('#fldSearchText').keypress(function (e) {
            var key = (e.keyCode ? e.keyCode : e.which);
            if (key == '13') {
                doSearch();
                return false;
            }
        });
    });

    function classesToList(selectedClasses) {
        var vReturn = "";

        for (var i = 0; i < selectedClasses.length; i++) {
            if (i > 0) vReturn = vReturn + ",";
            vReturn = vReturn + selectedClasses[i].Id;
        }

        return vReturn;
    }

    function getSearchParameters() {
        var vReturn = {};
        var classes = $("#classesGrid").dxDataGrid("instance");
        var selectedClasses = classes.getSelectedRowsData();

        vReturn.Classes = classesToList(selectedClasses);
        vReturn.Type = $(":radio[name=fldSearchType]:checked").val();
        vReturn.AllWords = $("#fldSearchAll").is(":checked");
        vReturn.Substrings = false;
        vReturn.Text = $('#fldSearchText').val();

        return JSON.stringify(vReturn);
    }

    function validateSearch() {
        var classes = $("#classesGrid").dxDataGrid("instance");
        var selectedClasses = classes.getSelectedRowsData();
        var selectedType = $(":radio[name=fldSearchType]:checked").val();

        //foneticas y no clases
        if (selectedType == '0' && (selectedClasses.length == 0 || selectedClasses.length == 47)) {
            return false;
        }

        return true;
    }

    function doSearch() {
        if (!validateSearch()) {
            confirm('Las búsquedas fonéticas sobre todas las clases no están permitidas. \nPor favor, seleccione al menos una clase para continuar.')
        } else {
            disableSearchButton();
            $('#searchGrid').dxDataGrid('instance').refresh();
        }
    }

    function disableSearchButton() {
        $('#buttonSearch').hide();
    }

    function enableSearchButton() {
        $('#buttonSearch').show();
    }

    function doSearchDetalle() {
        $('#classesGrid').dxDataGrid('instance').refresh();
    }

    function addWaterMark(doc) {
        var totalPages = doc.internal.getNumberOfPages();

        for (i = 1; i <= totalPages; i++) {
            doc.setPage(i);
            doc.setTextColor('#C0C0C0');
            doc.setFontSize(75);
            doc.saveGraphicsState();
            doc.setGState(new doc.GState({ opacity: 0.5 }));
            doc.text((doc.internal.pageSize.width / 2) - 30, (doc.internal.pageSize.height / 2) + 30, 'NO OFICIAL', null, 45);
        }

        return doc;
    }

    function exportToPDF() {
        var doc = new jsPDF();
        var dataGrid = $("#searchGrid").dxDataGrid("instance");

        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid
        }).then(function () {
            doc = addWaterMark(doc);
            doc.save("Marcas.pdf");
        });
    }
</script>



